log analysis 2

数据结构分析
过程
步骤
时间
操作者

过程：
过程名
步骤列表
位置列表

位置列表保存原始信息，
还是只抽取有效的部分，而把其他部分舍弃，
还是只保留标记，也即是出现时间

所以，一个过程在内存中保留的内容有这些，
过程名
步骤列表
步骤的出现时间

从客户端角度，一个请求发送多次，每次在一个线程中执行，
如何串起来这个过程，需要保存哪些数据？

请求到来后，有操作者标识，然后有线程标识，
下一个请求到来后，根据操作者标识串起来。

内存消耗保持在1G之内，硬盘消耗保持在1T之内

步骤：
步骤名
时间
程序名
线程号
操作者

过程：
过程名
步骤名列表
实际步骤列表

第一步，
从日志中抽取出以上信息
第二步，
从以上信息中构造输出信息
第三布，
响应请求的信息

第一步，
抽取出过程

1，数据结构定义
class Process
  name
  stepnamelist
  steplist

class step
  name
  time
  program
  threadid
  optor
  level
  filename
  lineno

关联，
如何建立关联，
请求到来后，有操作者标识，然后有线程标识，
在此线程内都是这个请求的处理，直到处理结束，
下一个请求到来后，根据操作者标识串起来，
这种关联需要哪些数据标识，

step 中的 optors，需要在一个步骤中查找多个操作者吗，
或者，一个步骤中有多个操作者标识？
只要出现一个标识，就表明是这个操作者集合都在这？
那么，就建立起来一个操作者关系，
每个步骤只要一个操作者，通过操作者关系进行关联。

还有，上面的关联，
是指，如果一个过程中只有某个步骤有操作者标识，
那么，如何确定这个过程中的其他步骤，
有两种方式，
一是，工作线程，
    如果是一个工作线程内处理这个过程，可以通过线程号确定
二是，消息通知，
    如果是两个或多个工作线程，那么线程切换一定存在消息通知，
	根据消息通知确定线程切换，再根据线程号确定，
	这里假定一个条件，消息通知后是按照先进先出顺序处理的。
上述分析，是属于过程，还是步骤？
当作步骤，
在查找步骤的过程中，有一个操作者设定，
优先查找操作者，
如果确定了操作者，
第一种情况，在处理结束之前这个线程号是一直处理这个过程的，
第二种情况，在信号发送之前这个线程号一直处理这个过程，
           在信号发送后，使用处理信号的线程号确定这个过程，
		   这里的前提，已经确定是哪个线程号接收这个信号，
所以，这个的结束标识，一个是显式结束，一个是信号发送，
信号发送还需要另外一个标识符。
这样的逻辑需要和步骤绑定吗？
应该不是，需要将此独立出一个策略，
这个策略用来设置 step 的 name 对应的 optor，
所以，step 保持以上的定义即可。

class link
  stratagy
按照以上分析，设置两种策略，
  
逻辑设计
初始化 process, step
目录中查找文件
  逐个打开文件
  循环读取
    读取一行
	查找对应的 process，
	查找对应的 step，
	设置 step 的属性，
	根据策略，设置 step 下一步的 optor

  读取完毕，关闭文件
  将 process 数据和标记增量写入磁盘缓存文件
  刷新内存，如果使用过大则清理部分内存，LRU
  
消息发送，消息处理过程：
开始是  Process Message
结束是  Wait for Messages

全局记录使用的数据：
filenamelist
processnamelist
programenamelist
processlist
stepnamelist
operatorlist
levellist

应当不会超过 255 个程序，所以，有些可以使用 char 就足够了。
这里先用 int，计算内存和磁盘使用量后再确定使用哪个。
但是 short 应该是足够的了。

在class procee, class step 中保存的都是上面的 list 的索引
也可以是 vector 的下标，使用 int 保存即可

所以 
class process
  int name
  vector<int> stepnamelist
  vector<step> steps
class step
  int name
  timev time
  int program
  int threadid
  int optor
  int level
  int filename
  int lineno
那么，一个 step 需要 9*4 = 36 字节
一个 process 需要很多
假设一个 process 需要 50 个 stepname，需要 100 个 step，
那么一个 process 需要 50*4+100*36 = 3800 字节
那么 1G 条 step 需要 36GB 内存和磁盘
那么 1G 条 step 共有 10M 个请求，
也仅仅是千万级并发的一秒钟的请求数，

哪个地方出问题了？

首先，
千万级并发一定使用的是集群，
可能是多个机房，
甚至可能是跨区域的，
假设每一个请求需要 10K 数据的网络传输，
那么，10K * 10M = 100G 的网络数据传输量，
肯定是主干网，基本可断定是所有区域的总数，

那么，每秒产生 36GB 的存储也是正常的。

那么，每一秒的请求会产生多少的日志，
假设一个请求有 100 个 step，每个 step 有 100byte，
那么，会有 100*100 = 10k 的字节数，
那么每一秒产生 100G 的日志，

那么按照实际日志量的千分之一和万分之一的目标，
这个远远不够，

上面的记录信息过多，
将 100 字节压缩成 36 个字节保存，所以需要这么多，
而日志的 step 的个数和分析的 step 个数是相同的，
那么，需要相同吗，

如果只分析其中的 50 个 step，
甚至只分析其中的 10 个 step，
只分析 10 个 step 时，需要三十分之一的原始日志量
性能堪忧，再优化。

性能问题先放一边，
先拿出个能够使用的程序。

关于关联，
每个过程有一个操作者转移规则，
转移规则是一个状态转移图，
根据当前的输入和所在的状态进行下次转移，
这个状态转移图是可编辑的，
在运行程序之前通过编辑状态转移图，
获取一个过程中关联的步骤，
示例：
T1 P1 R1 X1 Y1 Q1
T2 P1 R1 X2 Y2
T3 P1 R1 X3
T4 P1 R1 X4 Y3
T5 P1 R1 X5
T5 P1 R2 X1    Q1
那么，
第一行，根据 Q1 为操作者，
获取之后，设置下一个操作者为 R1
第二行直到第五行，一直是 R1 为操作者，
这里的关联规则是，
初始状态，使用 optor 为操作者，
检查到 optor 后，以 threadid 为操作者，
这个过程有 X1 X2 X3 X4 X5 五个步骤，
查找到全部五个步骤后，这个过程查找完成，

关联映射图：
optor -> threadid

每一个步骤的 name 还是需要指定的，

那么，初始化时，这个 process 的初始值是，
process1
  int name = "test"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT
第一行之后，
process1
  int name = "test"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = {
	  step = {
		  T1 P1 R1 X1 Q1 F1 L1
	  }
  }
  linkmap = {
	  int current = threadid
  }
  status = STARTED
第二行之后
process1
  int name = "test"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = {
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T2 P1 R1 X2    F1 L1 }
  }
  linkmap = {int current = threadid }
  status = STARTED
第五行之后
process1
  int name = "test"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = {
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T2 P1 R1 X2    F1 L2 }
	  step3 = {T3 P1 R1 X3    F1 L3	}
	  step4 = {T4 P1 R1 X4    F1 L4 }
	  step5 = {T5 P1 R1 X5    F1 L5 }
  }
  linkmap = {int current = threadid }
  status = FINISHED

如果一个 step 已经查找到，但是又出现一次，
那么需要怎么处理呢？

示例二：
T1 P1 R1 X1 Y1 Q1
T2 P1 R2 X1    Q2
T3 P1 R1 X2 Y2
T4 P1 R1 X3
T5 P1 R3 X1    Q3
T6 P1 R1 X4 Y3
T7 P1 R1 X5

初始化后
processlist = null
process_template1
  int name = "template1"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT
process_template2
  int name = "template2"
  stepnamelist = "Y1 Y2 Y3"
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT
这里的 optor 有一个确定的查找规则，
是从一行中查找到的，不是初始化时候指定的，
第一行之后：
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第二行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第三行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 Y2    F1 L3 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第四行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  step3 = {T4 P1 R1 X3    F1 L4 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第五行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  step3 = {T4 P1 R1 X3    F1 L4 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process4 from process_template1
    int name = Q3_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T5 P1 R3 X1 Q3 F1 L5 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第六行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  step3 = {T4 P1 R1 X3    F1 L4 }
	  step4 = {T6 P1 R1 X4    F1 L6 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 Y2    F1 L3 }
	  step3 = {T6 P1 R1 Y3    F1 L6 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = FINISHED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process4 from process_template1
    int name = Q3_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T5 P1 R3 X1 Q3 F1 L5 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
第七行之后
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  step3 = {T4 P1 R1 X3    F1 L4 }
	  step4 = {T6 P1 R1 X4    F1 L6 }
	  step4 = {T7 P1 R1 X5    F1 L7 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = FINISHED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 Y2    F1 L3 }
	  step3 = {T6 P1 R1 Y3    F1 L6 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = FINISHED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process4 from process_template1
    int name = Q3_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T5 P1 R3 X1 Q3 F1 L5 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED

示例二和示例一的区别，
初始化时候构造 process_template，
读取一行后，
根据 stepnamelist 确认此行是否是一个 step，
如果是
	查找 processlist 中是否有对应的未完成的 process
	如果没有，那么根据 process_template 中的 optor 生成对应的 process，填充 process
	如果有，更新 process 中的 steplist 和 linkmap 和 status
如果不是
    不处理

如何判断一行是否是 step
step 的必要要素，TIME,PROGRAMNAME,THREADID,one or more stepname,optor
如果包含必要要素，那么，就是一个 step，可以组装成一个 step。

关于补充，
某一过程中只是一个步骤的重复，而且重复次数不确定，
定义如下
process_template3
  int name = "template3"
  stepnamelist = "D1 D1 ..."
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT
如此看，
有两种过程模板
一种是确定次数的操作步骤
一种是重复而不确定次数的操作步骤

术语总结，
过程模板
过程
步骤名列表
步骤列表
步骤名
步骤

操作者
时间
程序名
线程号

关于“重复而不确定次数的操作步骤”
重复策略，或者说重复规则，
和关联的状态转换图一样，
初始化一个映射关系表，

最终使用方式，
确认日志的步骤名，
确认过程模板
  过程包含的步骤名
  关联映射关系表
  步骤映射关系表

编写以上配置信息
启动程序
得到信息提取结果

现在，完成了将以上术语产生关联的一个处理，
若要得到输出信息，还需下一步处理，

