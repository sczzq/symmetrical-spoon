可适应系统
系统随时间的推移不断发展变化：添加新功能、修改既有服务。
必须支持新版本的操作系统、用户界面平台、第三方组件和库，还可能必须适应新的标准或硬件平台。
规范软件系统的架构时，确保设计能适应变化是个重要的考虑因素。
支持修改和扩展是应用程序的第一要务。
修改应不会影响核心功能和重要的设计抽象。否则系统将难以维护，还会为适应不断变化的需求付出高昂代价。
确保适应变化的模式。
Microkernel模式，将最基本的功能核心与扩展的功能和随客户而异的部分分离。微核还充当插座，用户插入扩展及协调他们之间的协作。
Reflection模式，提供一种动态修改软件系统的结构和行为的机制。它支持对基本方面的修改，如类型结构和函数调用机制。采用这种模式时，应用程序分为两部分--元层和基层。元层提供有关选定系统属性的信息，让软件能够了解自己，基层包含应用程序逻辑，依赖于元层，修改元层存储的信息将影响基层的行为。