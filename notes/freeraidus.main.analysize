main_config_init 
    read the configuration files

radius_event_init
    initialize any event loops

modules_init
    load the modules

radius_event_start
    start the event loop(s) and threads

while((status = radius_event_process()) == 0x80){
	radius_stats_init(1);
	main_config_hup();
}

doc      document directory

raddb    配置文件目录

share    dictionary directory

src      程序代码目录
  include    头文件
  lib        库文件代码
  main       主流程代码
  modules    模块代码
  tests      测试代码

  
src/main/ 
  acct.c     Accounting routines.
  auth.c     User authentication.
  cb.c       Get info from TLS data, Fill in our 'info' with TLS data.
  channel.c  Read from and write to channel, or file descriptor.
  client.c   Manage clients allowed to communicate with the server.
  collectd.c    Helper functions to enabled radsniff to talk to collectd.
  command.c     Command socket processing.
  conffile.c    Read the radiusd.conf file.
  connection.c  Handle pools of connections (threads, sockets, etc.)
  crypt.c       A thread-safe crypt wrapper.
  detail.c    Process the detail file.
  evaluate.c  Evaluate complex conditions.
  exec.c    Execute external programs.
  exfile.c  Allow multiple threads to write to the same set of files.
  files.c   Read config files into memory.
  listen.c  Handle socket stuff.
  log.c     Logging functions used by the server core.
  mainconfig.c  Handle the server's configuration.
  map.c        map / template functions.
  modcall.c                             
  modules.c    Radius module support.
  pair.c       Valuepair functions that are radiusd-specific and as such do not belong in the library.
  parse.c      Parse various things.
  process.c    Defines the state machines that control how requests are processed.
  radattr.c    RADIUS Attribute debugging tool. int main(){}
  radclient.c   General radius packet debug tool. int main(){}
  radiusd.c   Main loop of the radius server. int main(){}
  radmin.c    RADIUS Administration tool. int main(){}
  radsniff.c  Capture, filter, and generate statistics for RADIUS traffic. int main(){}
  radwho.c   Show who is logged in on the terminal servers.
  realms.c   Realm handling code.
  regex.c    Regular expression functions used by the server library.
  session.c   session management.
  soh.c     Implements the MS-SOH parsing code. This is called from rlm_eap_peap.
  state.c    Multi-packet state handling.
  stats.c    Internal statistics handling.
  threads.c  request threading support.
  tls.c         tls data compose and decompose
  tls_listen.c  tls data transfer, listen, recv, send,
  tmpl.c      #VALUE_PAIR template functions
  unittest.c  Unit test wrapper for the RADIUS daemon.
  util.c      Various utility functions.
  version.c   version print, version check,.
  xlat.c    String expansion ("translation"). Implements %Attribute -> value

src/lib/ 
  base64.c  Encode/decode binary data using printable characters.
  cbuff.c   Implementation of a ring buffer.
  cursor.c  Functions to iterate over collections of VALUE_PAIRs.
  debug.c   Various functions to aid in debugging.
  dict.c    Routines to rad the dictionary file.
  event.c   Non-thread-safe event handling, specific to a RADIUS server.
  fifo.c    Non-thread-safe fifo implementation, based on hash tables.
  filters.c      Routines to parse Ascend's filter attributes.
  getaddrinfo.c  These functions are defined and used only if the configure
                 cannot detect the standard getaddrinfo(),freeaddrinfo(),
                 gai_strerror() and getnameinfo(). This avoids sprinkling of ifdefs.
  hash.c     Non-thread-safe split-ordered hash table.
  heap.c      A heap entry is made of a pointer to the object, which
              contains the key. The heap itself is an array of pointers.

              Heaps normally support only ordered insert, and extraction
              of the minimum element. The heap entry can contain an "int"
              field that holds the entries position in the heap. The offset
              of the field is held inside of the heap structure.

  hmacmd5.c   For the sake of illustration we provide the following
              sample code for the implementation of HMAC-MD5 as well
              as some corresponding test vectors (the code is based 
              on MD5 code as described in [MD5]).
  hmacsha1.c   Adapted from hmac.c (HMAC-MD5) for use by SHA1.
  isaac.c    random number generator, ISAAC.
  log.c    Functions in the library call radlib_log() which
           does internal logging.
  md4.c    md4 digest functions.
  md5.c    md4 digest functions.
  misc.c    Various miscellaneous functions.
  missing.c   Replacements for functions that are or can be missing on some platforms.
  net.c     Functions to parse raw packets.
  packet.c  Generic packet manipulation functions.
  pair.c    Functions to handle VALUE_PAIRs.
  pcap.c    Wrapper around libpcap functions.
  print.c   Routines to print stuff.
  radius.c  Functions to send/receive radius packets.
  rbtree.c  RED-BLACK balanced binary trees.
  regex.c   regex abstraction functions.
  sha1.c    SHA-1 in C
  snprintf.c  Unix snprintf implementation.
  snprintf.h  
  socket.c   Functions for establishing and managing low level sockets.
  strlcat.c  Concatenate strings.
  strlcpy.c  Copy strings.
  tcp.c      TCP-specific functions.
  token.c      Read the next token from a string.
               Yes it's pretty primitive but effective.
  udpfromto.c  Like recvfrom, but also stores the destination IP address. Useful on multihomed hosts.
  value.c    Functions to handle value_data_t
  version.c  Validate application and library magic numbers.

  

int main()
{
    talloc
    参数
    版本检测
      fr_check_lib_magic
      rad_check_lib_magic
      ssl_check_consistency
    版本打印
    保存调试状态
    初始化TLS
    main_config_init  : read config files. but which?
    OPENSSL版本检测
    talloc出错设置
    设置panic action
    以daemonize形式运行  : fork pipe read write, close some and exit from parent.
    radius_event_init  : 申请资源，注册事件
    modules_init  : 解析模块配置部分，载入并调用模块初始化函数. 申请资源，模块配置保存在rbtree中. 用到pair.h, value.c中的函数.
    radlog_init  : 重定向标准错误输出和标准输出
    event_loop_started = true
    radius_event_start(main_config.config, spawn_flag)  :  主要process.c过程，申请资源，开启线程，监听端口，
    signal(SIGPIPE, SIG_IGN)
    设置一些信号
      SIGHUP
      SIGTERM
      SIGINT
      SIGQUIT
    radius_stats_init(0) : gettimeofday(&hup_time, NULL)
    触发事件
    关闭管道的子进程的读
    fr_strerror() :  Clear the libfreeradius error buffer. Get the last library error
    fr_state_init(NULL); Initialise the state rbtree (used to link multiple rounds of challenges).
    请求循环，直到HUP or exit   : 在select或kevent处等待事件.



}

3290  src/lib/command.c
3764  src/lib/conffile.c
3465  src/lib/dict.c
3452  src/lib/listen.c
4026  src/lib/modcall.c
2443  src/lib/pair.c
5667  src/lib/process.c
4802  src/lib/radius.c
3629  src/lib/tls.c
