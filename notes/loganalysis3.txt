loganalysis2 的示例如下
期望输出信息
从日志中提取出过程和步骤
这些是独立的过程
把这些过程建立起来关联

以下面示例说明
日志输入
T1 P1 R1 X1 Y1 Q1
T2 P1 R2 X1    Q2
T3 P1 R1 X2 Y2
T4 P1 R1 X3
T5 P1 R3 X1    Q3
T6 P1 R1 X4 Y3
T7 P1 R1 X5
规则输入
processlist = null
process_template1
  int name = "template1"
  stepnamelist = "X1 X2 X3 X4 X5"
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT
process_template2
  int name = "template2"
  stepnamelist = "Y1 Y2 Y3"
  steplist = null
  linkmap = {
	  int current = optor
	  optor -> threadid
  }
  status = INIT

输出
processlist
  process1 from process_template1
    int name = Q1_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T1 P1 R1 X1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 X2    F1 L3 }
	  step3 = {T4 P1 R1 X3    F1 L4 }
	  step4 = {T6 P1 R1 X4    F1 L6 }
	  step4 = {T7 P1 R1 X5    F1 L7 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = FINISHED
  process2 from process_template2
    int name = Q1_Y1
	  stepnamelist = "Y1 Y2 Y3"
	  step1 = {T1 P1 R1 Y1 Q1 F1 L1 }
	  step2 = {T3 P1 R1 Y2    F1 L3 }
	  step3 = {T6 P1 R1 Y3    F1 L6 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = FINISHED
  process3 from process_template1
    int name = Q2_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T2 P1 R2 X1 Q2 F1 L2 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED
  process4 from process_template1
    int name = Q3_X1
	  stepnamelist = "X1 X2 X3 X4 X5"
	  step1 = {T5 P1 R3 X1 Q3 F1 L5 }
	  linkmap = {
		  int current = threadid
		  optor -> threadid
	  }
	  status = STARTED

有 process1,process2,process3
每个过程有对应的步骤
按照 loganalysis.txt 中所说
期望输出信息应当有下面：
计算过程的总时间
计算给定时间范围内的过程数
计算每两个步骤之间的时间差

这里没有考虑原始信息存储，
只存储了提取后的信息，
所以，这个目标是离线日志分析，
也可以实时日志分析，
但是没有原始信息存储，
提取信息后，
以后的分析是基于提取的信息进行的，
而不是根据原始信息分析的，
不是一个监控系统，
只是一个日志分析系统，
如果说像CAT的那样，作为业务监控系统，
而各个业务程序将日志信息上传上来之后再保存起来，
那么，就需要将原始信息存储起来了。
但是，原始信息，暂时没有看到原始信息有什么作用，
作为分析来看，作为信息统计来看，
作为信息查找来看，作为信息追踪来看，
对于信息追踪，提取的信息是足够用的了，
分析，统计，查找，追踪，应当是同样的都够用了，

关于存储
程序一般不会超过256个，那么使用一个字节就能够标识
关键字，也即是步骤名，应该不会超过65536个，那么使用两个字节就能够标识
线程号，一般不会超过65536，如果是初始化时申请而后使用的话，那么这个也是可以标识的
        或者，一般不会超过 256 个线程，一个字节也够标识了
时间，精度到微秒，需要8个字节
过程名，过程模板的个数也假设不超过 256，那么使用一个字节就可以了
状态转换图，一般，状态不超过 16 项，使用 4 个比特即可，转换关系不超过 3 个，使用 2 个比特即可

一个 process 有 100 step
一秒有 10M 请求，也即 10M process
一个 step 的字节数，1 + 1 + 2 + 8 + 1 + 2 = 15 个字节
如果时间精度使用秒，那么，15 - 4 = 11 字节即可
如果一步的原始日志是 100 字节，这是存储使用 11 字节，使用字典压缩，压缩率 89%
如果一行日志中有两个步骤，那么，就要用 22 字节存储，


